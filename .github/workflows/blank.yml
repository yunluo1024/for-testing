# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: dev

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
           echo this is list all secrets which started with gcp
           # secrets_name=`gh secret list -e dev | grep -i gcp | awk -F" " '{ print $1 }'`
           secrets_name=(GCP_A GCP_B)
           # iterate from the list;
           for secret_name in "${secrets_name[@]}";
           do
             export $secret_name=$secret_name
             echo env $ {{ env }}
             echo "$secret_name" = ${{ secrets[env.secret_name] }}
           done
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Check if file has changed
        id: file-changed
        run: |
          if `git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "README.md";` then
            echo "File has changed."
            echo "::set-output name=file_changed::true"
          else
            echo "File has not changed."
            echo "::set-output name=file_changed::false"
          fi

      - name: Run Job
        if: steps.file-changed.outputs.file_changed == 'true'
        run: |
          # Your job commands here
          echo "Running the job because the file has changed."
