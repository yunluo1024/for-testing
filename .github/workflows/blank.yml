# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: string
        default: dev

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: dev

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: GCP Auth
        id: gcp_auth
        uses: google-github-actions/auth@v1
        with:
            token_format: 'access_token'
            workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_NAME }}
            service_account: ${{ secrets.GCP_WORKLOAD_IDENTITY_SA_EMAIL }}
            access_token_lifetime: 3600s
            export_environment_variables: true

      # Runs a single command using the runners shell
      - name: Run a one-line script
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
            set -euxo
            echo this is list all secrets which started with gcp
            ACTIVE_CONFIG_NAME=$(gcloud api-gateway gateways describe agw-dev-appert  \
                --project=prj-dev-appert-375807 \
                --location=australia-southeast1 \
                --format="value(apiConfig)"
              )
              
              if [ -n "$ACTIVE_CONFIG_NAME" ]; then
                CURRENT_API_DOC_FILE_NAME=api-dev.yml
                ACTIVE_API_DOC_FILE_NAME=api-dev-active.yml
              
                # Use the active configuration name to get the full API document
                CONFIG_DOCUMENT=$(gcloud api-gateway api-configs describe $ACTIVE_CONFIG_NAME \
                  --api=agw-api-dev-appert \
                  --view=FULL \
                  --format="value(openapiDocuments.document.contents)")
                echo $CONFIG_DOCUMENT > ${ACTIVE_API_DOC_FILE_NAME}-temp
                cat ${ACTIVE_API_DOC_FILE_NAME}-temp | wc -c
                cat ${ACTIVE_API_DOC_FILE_NAME}-temp | base64 -d > ${ACTIVE_API_DOC_FILE_NAME}
                cat $ACTIVE_API_DOC_FILE_NAME
                echo "API document saved to ${ACTIVE_API_DOC_FILE_NAME}"
                if cmp -s "$CURRENT_API_DOC_FILE_NAME" "$ACTIVE_API_DOC_FILE_NAME"; then
                  printf 'The file "%s" is the same as "%s"\n' "$CURRENT_API_DOC_FILE_NAME" "$ACTIVE_API_DOC_FILE_NAME"
                  echo "api_file_changed=false" >> "$GITHUB_OUTPUT"
                else
                  printf 'The file "%s" is different from "%s"\n' "$CURRENT_API_DOC_FILE_NAME" "$ACTIVE_API_DOC_FILE_NAME"
                  echo "api_file_changed=true" >> "$GITHUB_OUTPUT"
                fi
              else
                echo "No active configuration found."
                echo "api_file_changed=true" >> "$GITHUB_OUTPUT"
              fi
